<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>JDK 11 概览</title>
      <link href="/2018/06/29/jdk11-preview/"/>
      <url>/2018/06/29/jdk11-preview/</url>
      <content type="html"><![CDATA[<p>JDK 11 已经刚刚进入<code>Rampdown Phase One</code>，或者说<code>减速开发第一阶段</code>。这将意味着主要新特性都已经冻结，以后将没有新的JEP进入JDK 11。这一阶段将侧重于加强内部稳定性，清理积存的bug和某些小型的增强。</p><p>身为新的JDK发布计划实施后的第一个长期支持版本(LTS)，JDK 11无疑受到了很多Java程序员的关注。就我而言，JDK 11既有惊喜又稍微有些失望。下面我将给大家带来新版本的大致预览。</p><h1 id="垃圾收集：精益求精"><a href="#垃圾收集：精益求精" class="headerlink" title="垃圾收集：精益求精"></a>垃圾收集：精益求精</h1><p>Java的垃圾收集机制虽然目前还是被一些开发者受诟病（2018年了，这样的程序员大概也很少了吧），但是Java还是拥有世界上最完善、性能最佳的垃圾收集系统。尽管目前作为默认GC的G1（garbage first）已经可以在大多数情况下提供令人满意的吞吐量和延迟，JDK 11仍然引入了一个更加强大的GC实现，<strong>ZGC</strong>，和一个<em>什么都不做的</em>GC实现，<strong>Epsilon</strong>。</p><h2 id="ZGC：承前启后，面向未来"><a href="#ZGC：承前启后，面向未来" class="headerlink" title="ZGC：承前启后，面向未来"></a>ZGC：承前启后，面向未来</h2><ul><li><a href="http://openjdk.java.net/jeps/333" target="_blank" rel="noopener">JEP 333: ZGC: A Scalable Low-Latency Garbage Collector (Experimental)</a></li></ul><p>ZGC是JDK 11中最引人注目的新特性。</p><p><a href="https://wiki.openjdk.java.net/display/zgc/Main" target="_blank" rel="noopener">OpenJDK Wiki</a>给出ZGC的目标是：</p><ul><li>GC停顿时间应该小于 <strong>10毫秒</strong></li><li>GC停顿时间 <strong>不随堆空间的增大而增大</strong></li><li>比较小的（<strong>几百MB</strong>）到非常大的（<strong>几TB</strong>）的堆空间都可以被处理</li><li>与G1垃圾收集器相比，不应有大于 <strong>15%</strong> 的应用程序吞吐量削减</li></ul><p>随着现在计算机硬件的飞速发展，内存空间也在逐渐变大。尤其是在一些高负载的、承担核心工作的服务器上，动辄有上百GB内存。但是目前的G1垃圾收集器的暂停时间会随着堆内存空间的增大而增大，这样就会在比较关键的服务器中引发更加不可忍耐的GC暂停。但是ZGC做出的<code>GC停顿时间不随堆空间的增大而增大</code>的承诺将会使Java更加适应新时代的硬件设备。</p><p>对NUMA（非统一内存访问架构）的识别和支持也是ZGC的亮点之一。简单的说，NUMA是一个在多处理器环境下共享内存的一种架构。但是由于<code>Remote Access</code>和<code>Local Access</code>之间相差数倍的访问性能，这个架构也导致了包括Mysql在内的很多数据库系统出现突然的性能滑坡。ZGC具有对NUMA的原生支持，可以让Java平台上的所有应用不用更改一行代码就可以享受到NUMA带来的优势，并且尽量规避其带来的风险。</p><p>顺便一提，ZGC是完全并行的垃圾收集器，这也意味这从前的<code>Stop-the-World</code>的垃圾收集方式已经彻底消失了。</p><p>总而言之，ZGC是一个主打 <strong>服务器</strong> 方面的GC。对于普通的Java开发者或者用户来说，G1以其经过时间考验的稳定性和很好的性能还是我们的首选垃圾收集器（如果你想用100GB的内存跑Minecraft，那么土豪请随意吧）。而对于管理海量内存的服务器应用来说，ZGC无疑是非常吸引人的。也正因如此，目前的ZGC也只支持64位的Linux操作系统，毕竟其他的系统没有这种需求（如果实在需要，ZGC的开发者表示也会在其他平台上进行迁移）。</p><h2 id="Epsilon：关掉GC有时也未必不是一个好选择"><a href="#Epsilon：关掉GC有时也未必不是一个好选择" class="headerlink" title="Epsilon：关掉GC有时也未必不是一个好选择"></a>Epsilon：关掉GC有时也未必不是一个好选择</h2><ul><li><a href="http://openjdk.java.net/jeps/318" target="_blank" rel="noopener">JEP 318: Epsilon: A No-Op Garbage Collector</a></li></ul><p>这个另类的垃圾收集器真的是什么都不干。它只管分配内存，然后没有剩余内存让JVM崩溃。</p><p>你可能会问，这东西有啥用？大概Oracle的工程师已经给你想好了应用领域：</p><ul><li>性能测试：这个属于开挂吧……</li><li>内存压力测试：可以更好的了解程序真正使用了多少内存</li><li>虚拟机接口测试：简单的GC可以避免JVM测试时产生的迷惑性</li><li>非常短的活动工作：根本分配不完所有的堆内存</li><li>对GC延迟极其敏感的应用：毕竟，Epsilon是真·零延迟</li><li>对内存吞吐量要求很高的应用：要多少给多少</li></ul><p>这个GC也算是Oracle对JDK10中新加入的垃圾收集器接口（<a href="http://openjdk.java.net/jeps/304" target="_blank" rel="noopener">JEP 304: Garbage Collector Interface</a>）的一个示例实现，来为今后社区对GC的贡献打下了基础。</p><h1 id="在Lambda表达式的参数中使用局部变量类型推断"><a href="#在Lambda表达式的参数中使用局部变量类型推断" class="headerlink" title="在Lambda表达式的参数中使用局部变量类型推断"></a>在Lambda表达式的参数中使用局部变量类型推断</h1><ul><li><a href="http://openjdk.java.net/jeps/323" target="_blank" rel="noopener">JEP 323: Local-Variable Syntax for Lambda Parameters</a></li></ul><p>除了上面两个为我们默默做出贡献的新特性，这个才是让开发者们比较兴奋的语法特性。</p><p>JDK 10中引入了<code>var</code>来支持局部变量的类型推断，而在lambda表达式的参数中，却只有写类型或不写类型两个选择。一般来说，lambda表达式是省略参数类型的，但是如果要加入<code>@Nonnull</code>等注解的话，参数类型又是必不可少的。所以这个JEP就应运而生了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(x, y) -&gt; x.process(y);</span><br><span class="line">(var x, var y) -&gt; x.process(y);</span><br><span class="line"><span class="comment">//这两个等价的</span></span><br></pre></td></tr></table></figure><p>但是要注意的是，如果你要用<code>var</code>，所有的参数就都得使用<code>var</code>。Java不允许部分使用<code>var</code>而其他不写类型或使用完整类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(var x, y) -&gt; x.process(y);</span><br><span class="line">(var x, <span class="keyword">int</span> y) -&gt; x.process(y);</span><br><span class="line"><span class="comment">//这两个都无法通过编译</span></span><br></pre></td></tr></table></figure><h1 id="标准化的HTTP客户端接口"><a href="#标准化的HTTP客户端接口" class="headerlink" title="标准化的HTTP客户端接口"></a>标准化的HTTP客户端接口</h1><ul><li><a href="http://openjdk.java.net/jeps/321" target="_blank" rel="noopener">JEP 321: HTTP Client (Standard)</a></li></ul><p>Java原来贫乏的<code>HttpURLConnection</code>等API已经在很长时间内备受程序员们的嫌弃，于是才出现像<code>Apache HttpClient</code>这样的第三方库。而且随着HTTP/2，HTTPS/TLS,WebSocket等技术的普及，全新的API更是为时代所需。所以JDK 11终于带给我们了一个基于JDK 9中的<a href="http://openjdk.java.net/jeps/110" target="_blank" rel="noopener">孵化器项目</a>的完整的标准化HTTP客户端API。</p><p>HTTP客户端使用Java中的NIO网络框架来实现无阻塞、高性能的异步网络通信，并通过比如<code>java.util.concurrent.CompletableFuture</code>的完善的底层并发框架实现异步通信。</p><p>在JEP110（其原型项目）中，这个API提供了：</p><ul><li>分离的请求和响应</li><li>异步通知</li><li>通过<code>SSLEngine</code>来提供HTTPS的支持</li><li>代理</li><li>Cookies</li><li>身份认证</li></ul><p>等较为基础的API。但是这个原型项目主要提供HTTP/1.1的API，对HTTP/2的支持还不甚完善。</p><p>在本JEP中，对HTTP/2的支持已经成为重中之重。并且还通过增加了对新加入的<code>reactive-streams</code>的支持来提供流畅的 <strong>反应式</strong> 编程模式。相比之下的新改动有：</p><ul><li>对某些API命名的改进以提高可读性</li><li>提供了诸如<code>fromXxx</code> <code>ofXxx</code>等静态工厂方法</li><li>还有很多API的加入、更改和移除</li></ul><p>关于新的HTTP客户端的使用，我会在今后对文章中详细描述。这里也提供一些资源以供参考：</p><ul><li><a href="http://cr.openjdk.java.net/~chegar/httpclient/02/javadoc/api/java.net.http/module-summary.html" target="_blank" rel="noopener">JavaDoc</a></li><li><a href="http://openjdk.java.net/groups/net/httpclient/intro.html" target="_blank" rel="noopener">官方的介绍</a></li><li><a href="http://openjdk.java.net/groups/net/httpclient/recipes.html" target="_blank" rel="noopener">一些示例程序</a></li></ul><h1 id="基于Nest的访问控制"><a href="#基于Nest的访问控制" class="headerlink" title="基于Nest的访问控制"></a>基于<code>Nest</code>的访问控制</h1><ul><li><a href="http://openjdk.java.net/jeps/181" target="_blank" rel="noopener">JEP 181: Nest-Based Access Control</a></li></ul><p>在以前的<code>private</code> <code>public</code> <code>protected</code>的基础上，JVM又提供了一种新的访问控制机制：<code>Nest</code>（好吧我真的不知道这个该咋翻译，大概是一窝？）。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>mathjax-test</title>
      <link href="/2018/03/20/mathjax-test/"/>
      <url>/2018/03/20/mathjax-test/</url>
      <content type="html"><![CDATA[<h1 id="MathJax-Test"><a href="#MathJax-Test" class="headerlink" title="MathJax Test"></a>MathJax Test</h1><p>$x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}$</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Mac迁移指南</title>
      <link href="/2018/03/17/new-to-macOS/"/>
      <url>/2018/03/17/new-to-macOS/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近我的主力设备更换成了MacBook Pro (15-inch, 2017)，初来乍到，发现自己面对着一个完全陌生的系统，根本不知道怎么用。这两万多等东西怎么也不能成为一个摆设吧。经过这几天摸索和踩坑，我在这里稍微总结一下我目前迁移到Mac的经验。</p><h1 id="几句忠告"><a href="#几句忠告" class="headerlink" title="几句忠告"></a>几句忠告</h1><ol><li>善用终端命令</li><li>善用触控板</li><li>记住你用的是Mac而不是Windows</li><li>善用快捷键</li><li>抛弃你以前对于电脑的所有习惯，从新开始</li></ol><h1 id="初来乍到"><a href="#初来乍到" class="headerlink" title="初来乍到"></a>初来乍到</h1><h2 id="第一印象"><a href="#第一印象" class="headerlink" title="第一印象"></a>第一印象</h2><h3 id="键盘"><a href="#键盘" class="headerlink" title="键盘"></a>键盘</h3><p>打开你的新MacBook，你首先看见的就是下面的键盘。于是你会注意到几个以前完全没有见过等按键：<code>control</code>、<code>option</code>和<code>command</code>键（如果你的MacBook选择了中文键盘，你还会发现大小写锁定键变成了中英文切换）。这几个键是Mac中修饰键，在macOS中有十分重要的作用。对于Windows用户，你需要知道的是：<code>control</code>相当于Windows的<code>ctrl</code>，<code>option</code>相当于Windows的<code>alt</code>，<code>command</code>相当于Windows的<code>windows徽标</code>。所以一些常用快捷键比如复制<code>ctrl+C</code>就变成了<code>command+C</code>。由于这几个修饰键与Windows的摆列方式不同，所以开始可能会有些不适应。即使这样，我也不建议使用键盘设置将这几个键的映射改成和Windows相同的排列方式，毕竟你用的是Mac。</p><p>如果你想要使用外接键盘，而且你的键盘不是专门为macOS设计的，那么在链接到Mac上等时候可能会出现下面的对话框。macOS将会指引你帮助系统识别键盘的键位，你只需要按照它说的做你的键盘在大多数情况下都会正常工作。</p><p><img src="1.png" alt="键盘识别助理"></p><p>但是由于键位映射上的差异，外接键盘和MacBook上的键盘上的排列可能不一样。这时候你需要使用系统设置来让他们统一。下图是我的配置，你可以根据自己习惯设置。</p><p><img src="2.png" alt="修饰键设置"></p><p>至于Fn键，它们在外接键盘上都工作很好，但是在我的键盘上，<code>PrtSc(Windows截屏键)</code>变成了<code>F13</code>，<code>Scroll Lock</code>变成了<code>F14</code>，<code>Pause</code>变成了<code>F15</code>。由于macOS默认配置，<code>F14`</code>F15`现在变成了调节屏幕亮度的按键（迷）。数字小键盘工作良好，只是数字键盘锁没有效果了，一直开启。</p><p><em>配有中文键盘的Macbook提示：大小写锁定变成了中英文切换键，如果想要使用大小写锁定请长按大小写锁定键</em></p><h3 id="Touch-Bar"><a href="#Touch-Bar" class="headerlink" title="Touch Bar"></a>Touch Bar</h3><p>这东西被Apple称为革新性的输入方式，然而可能太超前了，所以我这种落后时代的人并没有感到它有都么有用。相对来说，我感觉键盘快捷键还是要比伸手去够那一小条触控板要快一点。但是在有些应用中还是比较好使的。比如看视频时调整进度，编辑图片时调整参数，还能在任何时候调整屏幕亮度，调整音量，唤出Siri等等。其他就没有啥应用了。属于观赏价值大于实用价值的一个案例（Apple的东西嘛）。但这个东西，装X利器啊233333。</p><h3 id="触控板"><a href="#触控板" class="headerlink" title="触控板"></a>触控板</h3><p>在遇到MacBook之前，你可能从来没见过如此巨大的触控板，而且你也会好奇这种从来不怎么用的东西要这么大有什么用。但是，对于Mac来说，触控板是最重要的输入方式，macOS在触控板的适配，不同应用之间的行为一致性和操作的高效性和流畅性方面是其他系统根本无法比拟的。所以你要去设置-&gt;触控板上了解所有的手势操作，然后进行练习。可能这里的手势操作比较多，而且开始不怎么适应，但是经过不长时间的使用，这些都会变成你大脑中的条件反射。这时你可能就可能不会想念鼠标了。</p><h3 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h3><p>Apple的电脑系统，在我看来是最好看的系统了。当然我不想在这里引战，一个东西是好是坏，只有亲自用过以后才知道，别人的言论仅供参考。</p><p>屏幕下方的小条叫<code>Dock</code>，它会存放你的常用软件。<code>Dock</code>中第一个图标是<code>访达（Finder）</code>，通过它你可以查看你电脑上的所有文件。第二个图标是<code>Siri</code>，Apple的（弱智）语音助手。第三个图标是<code>启动台（Launchpad）</code>，轻按它会显示你所有的应用程序。其他常用应用都顾名思义。</p><p>macOS窗口的控制按钮（关闭，最小化和全屏）在窗口左上角。菜单栏都固定在屏幕最上方。使用关闭按钮一般不会真正关闭应用程序，这会让程序进入类似休眠的状态，在几乎不占用系统资源的情况下换来大大加快的应用程序启动速度。如果要完全关闭应用程序，请使用<code>Command+Q</code>快捷键。</p><p>macOS不存在Windows上不同盘符的设置，你的所有文件都将会存放在自己的用户文件夹中。这就要求你进行适当的文件管理。访达的颜色标记是个不错的整理工具。</p><p>macOS的<code>聚焦搜索（Spotlight）</code>非常好用，各种全盘搜索，快捷操作完全没问题。</p><p>其他的细枝末节在这里就不完全展开，你可以通过Apple的<a href="http://help.apple.com/macOS/high-sierra/mac-basics/" target="_blank" rel="noopener">官方入门教程</a>来学习macOS的使用。<a href="https://support.apple.com/guide/mac-help/welcome/mac" target="_blank" rel="noopener">Apple官方帮助网站</a>也是很好的学习资源。遇到问题要先去Google，要学会自己处理问题。</p><h2 id="更进一步"><a href="#更进一步" class="headerlink" title="更进一步"></a>更进一步</h2><h3 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h3><p>下面介绍macOS中几种安装软件的常用方式：</p><h4 id="AppStore"><a href="#AppStore" class="headerlink" title="AppStore"></a>AppStore</h4><p>使用AppStore是官方推荐的方式。不过macOS上应用商店并没有iOS上的好，应用数量少而且更新滞后，这和Apple的审核机制有很大关系。所以一般在应用商店里直接下载的情况不多。但是<code>Xcode</code>等就必须在上面下载了。</p><p><img src="6.png" alt="AppStore中的Xcode"></p><h4 id="其他方式"><a href="#其他方式" class="headerlink" title="其他方式"></a>其他方式</h4><p>如果不是在AppStore中下载，一般你会获得一个<code>.dmg</code>磁盘映像。双击它就可以进行加载并自动打开。然后你就可以按照指示进行安装。有时你下载了一个非常大的磁盘映像，macOS会花很长时间进行验证，你可以跳过这个过程直接加载。</p><p>将应用文件拖拽到<code>Applications</code>文件夹下是最简单和最常用的安装方式。</p><p><img src="3.png" alt="网易云音乐安装界面"></p><p>对于某些安装进程比较复杂或者可能需要一些运行额外操作的应用，它可能会提供一个<code>.pkg</code>格式的软件安装器。</p><p><img src="4.png" alt="jdk9磁盘映像"></p><p><img src="5.png" alt="jdk9安装界面"></p><p>有时它会同时提供两种方式供你选择，你只需要选择一种方式就可以完成安装。</p><p><img src="7.png" alt="Mathematica的磁盘映像"></p><p>当然有的时候它不会给你一个<code>.dmg</code>，给个压缩包也是很常见的。其他方式就按照软件官网中的安装指南进行操作就可以了。</p><p>啥？？你的软件没有官网？？随机应变，祝你好运。</p><h4 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h4><p><code>Homebrew</code>是macOS上最流行的软件包管理器。当然要使用它你可能需要接触<code>终端</code>。但是使用纯命令有时更加直观，而且更加高效。你可以在<a href="https://brew.sh" target="_blank" rel="noopener">Homebrew官网</a>中找到更多信息。在<a href="formulae.brew.sh">这里</a>列出了Homebrew可以安装的所有软件包。</p><h5 id="安装Homebrew"><a href="#安装Homebrew" class="headerlink" title="安装Homebrew"></a>安装Homebrew</h5><p>进入<code>启动台</code>，打开<code>实用工具</code>文件夹，找到<code>终端</code>应用，打开它。然后将下面的命令复制粘贴进去，按下回车。如果你的网络环境良好，Homebrew即刻就会在你的电脑中安装完毕。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure><p>Homebrew需要<code>Command Line Tools for Xcode</code>，所以在安装Homebrew之前请先去应用商店下载安装<code>Xcode</code>，或者通过Apple账号进入苹果开发者网站下载。</p><p>如果上述方法安装失败，其他安装方式可以在<a href="https://docs.brew.sh/Installation" target="_blank" rel="noopener">官方文档</a>中找到。</p><h5 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h5><ul><li><code>brew install &lt;formula&gt;</code> 安装一个软件包</li><li><code>brew uninstall &lt;formula&gt;</code> 卸载一个软件包</li><li><code>brew list</code> 列出所有软件包</li><li><code>brew update</code> 更新Homebrew自己</li><li><code>brew upgrade</code> 更新所有已安装的软件包</li><li><code>brew outdated</code> 列出所有过时的软件包</li><li><code>brew search (text|/text/)</code> 搜索软件包（使用<code>/</code>包围表示输入的是一个正则表达式）</li><li><code>brew cleanup</code> 移除所有过时软件包和下载缓存</li></ul><h5 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h5><p>Homebrew大量依赖git和GitHub进行资源下载，所以遇到<code>brew update</code>之类的卡死问题，可能是天朝GFW的缘故。这时候最好找一个科学上网工具，然后设置代理。在<code>brew</code>命令前加上<code>ALL_PROXY=&lt;proc&gt;://&lt;host&gt;:&lt;port&gt;</code>将会让Homebrew使用代理服务器。使用命令别名将会简化这一过程。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> brew=<span class="string">"ALL_PROXY=&lt;proc&gt;://&lt;host&gt;:&lt;port&gt;"</span></span><br></pre></td></tr></table></figure><p>这样以后的<code>brew</code>命令都会自动加入代理。</p><p>其他的问题请参考官网。</p><ul><li><a href="https://docs.brew.sh/Troubleshooting" target="_blank" rel="noopener">Troubleshooting</a></li><li><a href="https://docs.brew.sh/FAQ" target="_blank" rel="noopener">FAQ</a></li><li><a href="https://docs.brew.sh/Common-Issues" target="_blank" rel="noopener">Common Issues</a></li></ul><h5 id="Homebrew-cask"><a href="#Homebrew-cask" class="headerlink" title="Homebrew cask"></a>Homebrew cask</h5><p>Homebrew的安装方式是下载软件源代码在本地进行编译安装，而且其中的软件包大多是一些开发工具包。而<code>Homebrew cask</code>是Homebrew的一个扩展，提供了一个软件二进制包的一个仓库，使Homebrew可以直接下载编译好的应用程序，直接放置到<code>Applications</code>文件夹中完成安装。其使用方式也十分简单，下面一行命令就可以实现安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew tap caskroom/cask</span><br></pre></td></tr></table></figure><p>安装软件的方式也非常直观，比如下面一行命令就可以在你的电脑上安装Google Chrome浏览器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install google-chrome</span><br></pre></td></tr></table></figure><p>进一步的使用方法可以在其<a href="https://github.com/caskroom/homebrew-cask#learn-more" target="_blank" rel="noopener">Github首页</a>找到。</p><h3 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h3><p>对于我来说，很多常用软件都有官方的macOS版本。比如网易云音乐，QQ，百度网盘，Chrome浏览器，Adobe全家桶等。很多开发工具在macOS上更能完美的安装和运行，这主要得益于macOS的UNIX血统。在这里我主要想提一下几个macOS和Windows相比有些不同的地方。</p><h4 id="Office办公套件"><a href="#Office办公套件" class="headerlink" title="Office办公套件"></a>Office办公套件</h4><p>macOS预装了苹果自己的iWork办公套件，他们分别是：<code>Pages</code>对应<code>Office Word</code>，<code>Keynotes</code>对应<code>Office PowerPoint</code>，<code>Numbers</code>对应<code>Office Excel</code>。他们都是非常好的软件，而且和macOS更加贴切。但是如果你日常接触到的更多的是微软Office产生的文件，尤其是Office2007以前的扩展名不带<code>x</code>的文件，那么他们的适配就不怎么好了。轻则显示不正常，重则损坏文件。处理这些文件还是要Office最好了。</p><p>Office是有macOS版本的，但是他们需要购买才可以使用。你可以到微软官网申请<code>Insider</code>内测成员来免费使用Office的最新（也不怎么稳定）的版本。</p><h4 id="下载工具"><a href="#下载工具" class="headerlink" title="下载工具"></a>下载工具</h4><p>Windows有一个迅雷，但是macOS上看起来没有这样的软件。但是我在这里给大家推荐一款命令行软件，<code>aria2</code>。关于它的详细配置我会在另外的博文中说明。</p><h4 id="录屏软件"><a href="#录屏软件" class="headerlink" title="录屏软件"></a>录屏软件</h4><p>我推荐的macOS上的录屏软件是<code>OBS</code>。这对你可能是个很熟悉的名字，但是你可能不知道这个十分流行的直播推流软件也可以作为一个完全免费的跨平台录屏软件使用。但是在macOS上，还是要进行进一步的配置才可以完美使用。这还是要留到别的博文里喽。</p><h3 id="macOS进阶使用"><a href="#macOS进阶使用" class="headerlink" title="macOS进阶使用"></a>macOS进阶使用</h3><h4 id="NTFS文件系统"><a href="#NTFS文件系统" class="headerlink" title="NTFS文件系统"></a>NTFS文件系统</h4><p>由于苹果和微软的某些利益纠纷，NTFS格式的磁盘在macOS上只能挂载和读取，无法更改和写入。要想完整的支持NTFS文件系统，需要进行一些更改。</p><p>第一种方式是下载某些软件让macOS支持NTFS。这里有付费和免费两大阵营。付费软件我推荐<code>Tuxera NTFS for Mac</code>（<a href="https://www.tuxera.com/products/tuxera-ntfs-for-mac/" target="_blank" rel="noopener">官网</a>)，它价格为195¥，但是提供了最好的性能和稳定性。免费的话我推荐<code>NTFS 3G</code>（<a href="https://github.com/osxfuse/osxfuse/wiki/NTFS-3G" target="_blank" rel="noopener">安装方式</a>)，它其实在内部使用了<code>Tuxera NTFS</code>的一种开源实现，日常使用应该没有问题。</p><p>第二种方式是开启macOS中隐藏的内建NTFS支持。macOS其实是可以原生支持NTFS读写的，但是由于不明原因默认不被开启。<a href="https://www.jianshu.com/p/08abdd95b989" target="_blank" rel="noopener">这片博文</a>大概已经说的很好了。知乎上<a href="https://www.zhihu.com/question/19571334/answer/25245070" target="_blank" rel="noopener">这个答案</a>提供了一种自动挂载的方式。但是应当注意的是，这种方式还是会有一定风险，请小心使用。</p><p>其实用那种方式都没有太大关系，损害硬盘的情况毕竟是少数。只要你小心使用，拔出时先在发达中弹出磁盘，就不会有事。不作死就不会死。</p><h4 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h4><p>macOS天生就不是玩游戏的。但是你如果一定要玩的话，也不是没有办法23333。</p><p>首先你要有一个鼠标，你不会想用触控板玩游戏吧。</p><p>有一些游戏原生支持macOS。这里我要广告一下我最喜欢的游戏：Minecraft（壮哉我大MC）。它在我的MacBook上表现非常出色。但是最新版的Minecraft在macOS上可能会出现崩溃。崩溃日志如果出现<code>java.lang.NoClassDefFoundError: ca/weblite/objc/NSObject</code>类似的错误，那就是由于MOJANG的疏忽而导致依赖库的缺失。你需要下载<a href="https://libraries.minecraft.net/ca/weblite/java-objc-bridge/1.0.0/java-objc-bridge-1.0.0.jar" target="_blank" rel="noopener">这个库</a>，然后把它放到<code>.minecraft/libraries/ca/weblite/java-objc-bridge/1.0.0</code>文件夹下，就可以启动了。</p><p>其他的游戏就要求助于Steam游戏平台了（最好的理财工具）。CS:GO和Dota2都是macOS上比较好的免费大型游戏。文明系列也都很好。steam上还有大批macOS可用的游戏供你下载。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这些是我使用MacBook Pro这几个月来总结的经验，希望对你能有所帮助。这片文章将会持续更新。</p><p>每个人的习惯都是不一样的，你要形成自己的风格，而不是一昧的模仿他人。希望你用Mac用的愉快。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/02/25/hello-world/"/>
      <url>/2018/02/25/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Hello 2017</title>
      <link href="/2017/01/27/hello-2017/"/>
      <url>/2017/01/27/hello-2017/</url>
      <content type="html"><![CDATA[<p>这是我的独立博客xsun.io的第一篇文章。本来计划除夕夜就上线工作，没想到要购买百度云虚拟主机还要进行实名验证，于是推迟了一天。那就用这篇文章来祝贺一下2017新年的到来以及xsun.io的上线，顺便吐吐槽，谈谈理想之类的。</p><p>2016年对我来说是比较有纪念意义的一年。我从平原县第二中学毕业，进入了我们县唯一的高中——平原一中。初中三年是很快乐的时光，我又认识了很多新的同学、朋友、老师，还当了人生中第一次班长（虽然那是几段不堪回首的日子）。我们在一起快乐的度过了人生中最重要的三年，谢谢你们。我成长了许多，又学到了许多。我还有幸接触了Java这门膜法的程序设计语言，从此我从小到大的理想终于不再悬浮在无法捉摸的半空中了。在我朋友zilong的带领下，我又认识了我现在最喜欢玩也是唯一在玩的游戏——Minecraft。它是世界电子游戏的一个奇迹，是每个人发挥自己想象力和创造力的平台，是一个孤独的、自由的世界，它会影响我的一生。进入高中，我又认识了更多的同学，以前不在一个学校的同学又重新聚集在了一起（然而不认识小学同学的时候可尴尬了）。通过班主任，我了解到了信息学奥林匹克竞赛，从此我又走上了NOIP的道路（还要和坑爹的C\C++打交道）。虽然中途经历了短暂的迷茫与摸索，还错过了NOIP2016复赛，但我最后还是决定了走竞赛这条路。我认为参加NOIP不仅会对考上大学有好处，而且当今后我真正的从事了IT相关的工作后，它一定会让我受益的。</p><p>在两次进入清北学堂的培训中，我认识了很多很多神犇，也认识到自己到底是多么的渺小……无论在那个方面，他们都比我强，比如技术，知识，还有视野。他们有的来自大城市，反正大多数都比我们平原大。城市的大小决定了人的视野和我们所处的平台，他们可以更早的认识到更新，更好，更有价值的东西，与更大的，更广泛的群体接触。但是我们只能在自己的群体中生活与进步，不会冲出屏障再次提升自己，因为在我们现在的视界中我们可能就已经很厉害了，无法接触到更厉害的大神们，无法了解自己的不足。我们的环境可能一时半会是无法改变的，但是我们可以尝试改变自己。我今后要（尽量）虚心，不要被周围的环境所束缚，固步自封，沉浸在自满与骄傲中无法自拔。</p><p>2017的我可能会非常忙碌，因为我不仅进入了高一下学期更加紧张的学习，而且要准备我最后一次NOIP考试了。（高三NOIP可能没有什么用了，顶多挂个省一）我要有计划的学习，复习，以一个新的面貌迎接新的挑战。要在平原县教学极其坑爹的大环境下，要想学习成绩不掉还要抽出上百个小时来联系NOIP是比较困难的，但是我相信在我自己的努力下，在老师、同学、父母的帮助和鼓励下，我会取得让大家满意的成就的。</p><p>新的一年，新的开始，我要重整旗鼓，加油加油再加油。也在这里祝大家2017事事顺利，吉祥如意，开开心心每一天！！</p><blockquote><p>2017/1/27  23:57 你们的 xsun</p></blockquote><p>吐槽时间：</p><ul><li>我的电脑性能被虐了啊啊啊啊，AMD坑死了……</li><li>不知道NOIP2017会咋样，只要不爆零……rp++;</li><li>实名认证竟然要两个工作日，这工作效率。</li><li>HTTP被禁了，要不我就用BAE基础版了。（一天三毛钱，便宜又实惠）</li><li>自豪的采用WordPress……</li><li>Windows 10 Insider Preview的bug太多了……</li><li>为啥Minecraft运行一直是用我Intel的集显……</li><li>Intellij IDEA大发好，Java大发好！！！</li><li>作业还没有动呢…</li><li>中国的教育我都懒得吐槽了，可是这样下去中国真是不大可能又创新了啊。</li><li>还是C418的音乐好听。</li><li>困死我了。</li><li>春晚一年比一年渣。</li><li>我说上面那句话不会被F**k GFW墙吧。</li><li>我刚刚记起来要教我后桌学Lua呢。</li><li>应该没了。</li><li>如果你能坚持看到这里，说明你很有耐心啊，毕竟我的语文水平很渣啊，谢谢你啦。</li></ul>]]></content>
      
      
    </entry>
    
  
  
    
  
</search>
